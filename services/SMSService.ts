
import axios from 'axios';

export class SMSService {
    private static instance: SMSService;

    private readonly templates = {
        orderCreated: (servDeskId: string | number) =>
            `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #${servDeskId} –ø—Ä–∏–π–Ω—è—Ç–∞. –ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.`,

        orderConfirmed: (servDeskId: string | number) =>
            `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #${servDeskId} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞. –û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞ –º–∞–π—Å—Ç—Ä–∞ –¥–ª—è —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è —á–∞—Å—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.`,

        callbackRequest: (servDeskId: string | number) =>
            `–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –¥–∑–≤—ñ–Ω–æ–∫ #${servDeskId} –ø—Ä–∏–π–Ω—è—Ç–æ. –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.`
    };

    private errorCount: Record<string, number> = {};
    private readonly ERROR_THRESHOLD = 3; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
    private readonly ERROR_RESET_INTERVAL = 1800000; // 30 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

    private constructor() {
        setInterval(() => {
            this.errorCount = {};
        }, this.ERROR_RESET_INTERVAL);
    }

    public static getInstance(): SMSService {
        if (!SMSService.instance) {
            SMSService.instance = new SMSService();
        }
        return SMSService.instance;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ Telegram
     * –í–∫–ª—é—á–∞–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –∑–∞—â–∏—Ç—ã –æ—Ç —Ñ–ª—É–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ–± –æ—à–∏–±–∫–∞—Ö
     */
    private async notifyAdminAboutError(error: unknown, context: {
        phone: string;
        type: string;
        servDeskId: string | number;
    }): Promise<void> {
        try {
            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
            const errorKey = `${context.type}_${context.phone}`;
            this.errorCount[errorKey] = (this.errorCount[errorKey] || 0) + 1;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ø–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if (this.errorCount[errorKey] > this.ERROR_THRESHOLD) {
                return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            const errorMessage = [
                '‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ SMS!',
                '',
                `üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${context.phone}`,
                `üìã –¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${context.type}`,
                `üî¢ ServDesk ID: ${context.servDeskId}`,
                '',
                '‚ö†Ô∏è –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:',
                error instanceof Error ? error.message : JSON.stringify(error),
                '',
                `–°–ø—Ä–æ–±–∞: ${this.errorCount[errorKey]} –∑ ${this.ERROR_THRESHOLD}`
            ].join('\n');

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            await axios.post(
                `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
                {
                    chat_id: process.env.TELEGRAM_CHAT_ID, 
                    text: errorMessage,
                    parse_mode: 'HTML'
                }
            );
        } catch (notificationError) {
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            console.error('[ADMIN_NOTIFICATION_ERROR]:', notificationError);
        }
    }

    private async sendSMS(phone: string, message: string): Promise<boolean> {
        try {
            const uniqueKey = Date.now().toString();
            const xmlData = `<?xml version='1.0' encoding='UTF-8' ?>
                <message>
                    <service id='single' source='BatyevkaNET' uniq_key='${uniqueKey}'/>
                    <to>${phone}</to>
                    <body content-type='text/plain'>${message}</body>
                </message>`;
    
            const response = await axios.post(
                'https://api.omnicell.com.ua/ip2sms/',
                xmlData,
                {
                    headers: {
                        'Content-Type': 'text/xml',
                        'Authorization': 'Basic ' + Buffer.from(
                            'BatyevkaNET:' + process.env.OMNICELL_PASSWORD
                        ).toString('base64'),
                    }
                }
            );
    
            if (response.status === 200) {
                if (response.data && typeof response.data === 'string' && response.data.includes('error')) {
                    console.error('[SMS_API_ERROR]:', response.data);
                    return false;
                }
                return true;
            }
    
            console.error('[SMS_API_ERROR]: Unexpected status code:', response.status);
            return false;
    
        } catch (error) {
            if (axios.isAxiosError(error)) {
                if (error.response) {
                    console.error('[SMS_API_ERROR]: Server responded with error:', {
                        status: error.response.status,
                        data: error.response.data
                    });
                } else if (error.request) {
                    console.error('[SMS_API_ERROR]: No response received:', error.message);
                } else {
                    // –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞
                    console.error('[SMS_API_ERROR]: Request configuration error:', error.message);
                }
            } else {
                // –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
                console.error('[SMS_API_ERROR]: Unexpected error:', error);
            }
    
            return false;
        }
    }

    public async sendNotification(
        type: keyof typeof this.templates,
        phone: string,
        servDeskId: string | number
    ): Promise<boolean> {
        try {
            const template = this.templates[type];
            if (!template) {
                throw new Error(`Unknown notification type: ${type}`);
            }

            const cleanPhone = phone.replace(/[^0-9]/g, '');
            if (!cleanPhone.match(/^380\d{9}$/)) {
                throw new Error(`Invalid phone number format: ${phone}`);
            }

            const message = template(servDeskId);
            const sent = await this.sendSMS(cleanPhone, message);

            if (!sent) {
                throw new Error('SMS sending failed');
            }

            return true;

        } catch (error) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø—Ä–æ–±–ª–µ–º–µ
            await this.notifyAdminAboutError(error, {
                phone,
                type,
                servDeskId
            });

            return false;
        }
    }
}

export const smsService = SMSService.getInstance();